"""
TUTORIAL PYTHON - SE√á√ÉO 1: TIPOS DE DADOS B√ÅSICOS
==================================================

O QUE S√ÉO TIPOS DE DADOS?
-------------------------
Em programa√ß√£o, os dados que manipulamos t√™m diferentes "formas" ou "tipos".
Assim como na vida real temos diferentes tipos de objetos (carros, casas, pessoas),
no Python temos diferentes tipos de dados (texto, n√∫meros, listas, etc.).

Cada tipo de dado tem caracter√≠sticas espec√≠ficas e comportamentos pr√≥prios.
Entender os tipos de dados √© fundamental para programar bem!

COMO USAR ESTE ARQUIVO:
‚Ä¢ Execute diretamente: python 01_tipos_dados.py
‚Ä¢ Ou importe em outro arquivo: from 01_tipos_dados import demonstrar_tipos_dados

ORDEM DE ESTUDO:
Este √© o SEGUNDO arquivo a ser estudado, ap√≥s 00_funcoes_basicas.py

PR√â-REQUISITOS:
‚Ä¢ Conhecimento das fun√ß√µes b√°sicas (print, coment√°rios, type, etc.)

Autor: Material de Aula
Data: 25/08
Vers√£o: 3.0 (Organizado e Comentado para Iniciantes)
"""

# =============================================================================
# SE√á√ÉO 1: TIPOS DE DADOS B√ÅSICOS
# =============================================================================

def demonstrar_tipos_dados():
    """
    Fun√ß√£o que demonstra todos os tipos de dados b√°sicos do Python.
    
    Esta fun√ß√£o √© como uma "aula pr√°tica" onde mostramos cada tipo
    de dado e explicamos o que ele √©.
    """
    
    print("=" * 60)
    print("SE√á√ÉO 1: TIPOS DE DADOS B√ÅSICOS")
    print("=" * 60)
    
    # =====================================================================
    # 1. STRING (str) - TEXTO
    # =====================================================================
    print("\n1. STRING (str) - TEXTO")
    print("-" * 40)
    
    # String √© uma sequ√™ncia de caracteres (letras, n√∫meros, s√≠mbolos)
    # Pode ser criada com aspas simples '' ou duplas ""
    nome = "Jo√£o Silva"
    cidade = 'S√£o Paulo'
    
    print(f"String: '{nome}' - Tipo: {type(nome)}")
    print(f"String: '{cidade}' - Tipo: {type(cidade)}")
    print("‚Ä¢ Strings s√£o usadas para armazenar texto")
    print("‚Ä¢ Podem conter letras, n√∫meros, espa√ßos e s√≠mbolos")
    print("‚Ä¢ S√£o imut√°veis (n√£o podem ser alteradas depois de criadas)")
    
    # =====================================================================
    # 2. INTEIRO (int) - N√öMEROS INTEIROS
    # =====================================================================
    print("\n2. INTEIRO (int) - N√öMEROS INTEIROS")
    print("-" * 40)
    
    # Inteiro s√£o n√∫meros sem parte decimal
    # Podem ser positivos, negativos ou zero
    idade = 28
    temperatura = -5
    quantidade = 0
    
    print(f"Inteiro: {idade} - Tipo: {type(idade)}")
    print(f"Inteiro negativo: {temperatura} - Tipo: {type(temperatura)}")
    print(f"Zero: {quantidade} - Tipo: {type(quantidade)}")
    print("‚Ä¢ Inteiros s√£o n√∫meros sem v√≠rgula")
    print("‚Ä¢ Podem ser positivos, negativos ou zero")
    print("‚Ä¢ S√£o usados para contagens, idades, quantidades, etc.")
    
    # =====================================================================
    # 3. FLOAT - N√öMEROS DECIMAIS
    # =====================================================================
    print("\n3. FLOAT - N√öMEROS DECIMAIS")
    print("-" * 40)
    
    # Float s√£o n√∫meros com parte decimal
    # Usam ponto (.) como separador decimal
    saldo_conta = 1500.75
    altura = 1.75
    pi = 3.14159
    
    print(f"Float: {saldo_conta} - Tipo: {type(saldo_conta)}")
    print(f"Float: {altura} - Tipo: {type(altura)}")
    print(f"Float: {pi} - Tipo: {type(pi)}")
    print("‚Ä¢ Floats s√£o n√∫meros com v√≠rgula decimal")
    print("‚Ä¢ Usam ponto (.) como separador (n√£o v√≠rgula)")
    print("‚Ä¢ S√£o usados para pre√ßos, medidas, c√°lculos cient√≠ficos, etc.")
    
    # =====================================================================
    # 4. BOOLEAN (bool) - VALORES L√ìGICOS
    # =====================================================================
    print("\n4. BOOLEAN (bool) - VALORES L√ìGICOS")
    print("-" * 40)
    
    # Boolean s√≥ pode ter dois valores: True (Verdadeiro) ou False (Falso)
    # S√£o muito usados em decis√µes e condi√ß√µes
    is_admin = False
    esta_chovendo = True
    tem_estoque = True
    
    print(f"Boolean: {is_admin} - Tipo: {type(is_admin)}")
    print(f"Boolean: {esta_chovendo} - Tipo: {type(esta_chovendo)}")
    print(f"Boolean: {tem_estoque} - Tipo: {type(tem_estoque)}")
    print("‚Ä¢ Boolean s√≥ pode ser True ou False")
    print("‚Ä¢ True = Verdadeiro, False = Falso")
    print("‚Ä¢ S√£o usados para decis√µes: 'se est√° chovendo, leve guarda-chuva'")
    
    # =====================================================================
    # 5. LISTA (list) - COLE√á√ÉO ORDENADA
    # =====================================================================
    print("\n5. LISTA (list) - COLE√á√ÉO ORDENADA")
    print("-" * 40)
    
    # Lista √© uma cole√ß√£o de itens em uma ordem espec√≠fica
    # Os itens podem ser de tipos diferentes
    # Listas s√£o mut√°veis (podem ser alteradas)
    lista_produtos = ["Notebook", "Mouse", "Teclado", "Monitor"]
    lista_mista = ["texto", 123, 45.67, True]
    
    print(f"Lista: {lista_produtos} - Tipo: {type(lista_produtos)}")
    print(f"Lista mista: {lista_mista} - Tipo: {type(lista_mista)}")
    print("‚Ä¢ Listas s√£o cole√ß√µes ordenadas de itens")
    print("‚Ä¢ Podem conter diferentes tipos de dados")
    print("‚Ä¢ S√£o mut√°veis (podem ser alteradas)")
    print("‚Ä¢ Usam colchetes [] para criar")
    print("‚Ä¢ S√£o muito √∫teis para armazenar m√∫ltiplos valores")
    
    # =====================================================================
    # 6. DICION√ÅRIO (dict) - COLE√á√ÉO CHAVE-VALOR
    # =====================================================================
    print("\n6. DICION√ÅRIO (dict) - COLE√á√ÉO CHAVE-VALOR")
    print("-" * 40)
    
    # Dicion√°rio √© uma cole√ß√£o de pares chave-valor
    # Cada item tem uma chave (nome) e um valor associado
    # √â como um dicion√°rio real: palavra (chave) -> significado (valor)
    dicionario_produtos = {
        "Notebook": 1500.75,
        "Mouse": 25.99,
        "Teclado": 49.99,
        "Monitor": 299.99
    }
    
    dicionario_pessoa = {
        "nome": "Maria",
        "idade": 25,
        "cidade": "Rio de Janeiro",
        "ativo": True
    }
    
    print(f"Dicion√°rio produtos: {dicionario_produtos} - Tipo: {type(dicionario_produtos)}")
    print(f"Dicion√°rio pessoa: {dicionario_pessoa} - Tipo: {type(dicionario_pessoa)}")
    print("‚Ä¢ Dicion√°rios s√£o cole√ß√µes de pares chave-valor")
    print("‚Ä¢ Cada item tem um nome (chave) e um valor")
    print("‚Ä¢ Usam chaves {} para criar")
    print("‚Ä¢ S√£o muito √∫teis para organizar dados relacionados")
    print("‚Ä¢ Exemplo: 'nome' √© a chave, 'Maria' √© o valor")
    
    # =====================================================================
    # 7. TUPLA (tuple) - COLE√á√ÉO IMUT√ÅVEL
    # =====================================================================
    print("\n7. TUPLA (tuple) - COLE√á√ÉO IMUT√ÅVEL")
    print("-" * 40)
    
    # Tupla √© como uma lista, mas n√£o pode ser alterada (imut√°vel)
    # Usa par√™nteses () para criar
    coordenadas = (10, 20)
    cores_rgb = (255, 128, 0)
    
    print(f"Tupla: {coordenadas} - Tipo: {type(coordenadas)}")
    print(f"Tupla RGB: {cores_rgb} - Tipo: {type(cores_rgb)}")
    print("‚Ä¢ Tuplas s√£o como listas, mas n√£o podem ser alteradas")
    print("‚Ä¢ Usam par√™nteses () para criar")
    print("‚Ä¢ S√£o √∫teis para dados que n√£o devem mudar")
    print("‚Ä¢ Exemplo: coordenadas de um ponto, cores RGB")
    
    # =====================================================================
    # 8. CONJUNTO (set) - COLE√á√ÉO DE ELEMENTOS √öNICOS
    # =====================================================================
    print("\n8. CONJUNTO (set) - COLE√á√ÉO DE ELEMENTOS √öNICOS")
    print("-" * 40)
    
    # Conjunto √© uma cole√ß√£o que n√£o permite elementos duplicados
    # N√£o mant√©m ordem espec√≠fica
    cores = {"vermelho", "azul", "verde", "azul"}  # "azul" ser√° duplicado
    numeros = {1, 2, 3, 3, 4, 5, 5}  # N√∫meros duplicados ser√£o removidos
    
    print(f"Conjunto cores: {cores} - Tipo: {type(cores)}")
    print(f"Conjunto n√∫meros: {numeros} - Tipo: {type(numeros)}")
    print("‚Ä¢ Conjuntos n√£o permitem elementos duplicados")
    print("‚Ä¢ N√£o mant√™m ordem espec√≠fica")
    print("‚Ä¢ Usam chaves {} para criar (como dicion√°rios)")
    print("‚Ä¢ S√£o √∫teis para remover duplicatas")
    print("‚Ä¢ Exemplo: lista de usu√°rios √∫nicos, cores dispon√≠veis")
    
    print("\n" + "-" * 60)
    print("FIM DA SE√á√ÉO 1 - TIPOS DE DADOS B√ÅSICOS")
    print("-" * 60)
    
    # =====================================================================
    # PR√ìXIMOS PASSOS
    # =====================================================================
    print("\nPR√ìXIMOS PASSOS:")
    print("-" * 60)
    print("Agora que voc√™ aprendeu os tipos de dados, continue com:")
    print("‚Ä¢ 02_operadores.py - Operadores")
    print("‚Ä¢ 03_estruturas_controle.py - Estruturas de controle")
    print("‚Ä¢ 04_funcoes.py - Fun√ß√µes")
    print("‚Ä¢ 05_poo.py - Programa√ß√£o Orientada a Objetos")
    print("‚Ä¢ 06_exemplos_avancados.py - Exemplos avan√ßados")
    print()
    print("Execute: python 02_operadores.py")

# =============================================================================
# EXECU√á√ÉO INDEPENDENTE
# =============================================================================

if __name__ == "__main__":
    """
    Este bloco executa quando o arquivo √© executado diretamente.
    Permite que cada arquivo funcione independentemente.
    """
    print("üöÄ INICIANDO TUTORIAL PYTHON - SE√á√ÉO 1: TIPOS DE DADOS B√ÅSICOS")
    print("=" * 80)
    print()
    print("Este arquivo pode ser executado independentemente!")
    print("Execute: python 01_tipos_dados.py")
    print()
    print("Pressione Enter para come√ßar...")
    
    try:
        input()  # Aguarda o usu√°rio pressionar Enter
        demonstrar_tipos_dados()
    except KeyboardInterrupt:
        print("\n\n‚ùå Tutorial interrompido pelo usu√°rio.")
        print("Execute novamente: python 01_tipos_dados.py")
    except Exception as e:
        print(f"\n\n‚ùå Erro inesperado: {e}")
        print("Verifique se o Python est√° instalado corretamente.")
